<Window x:Class="AnBiaoZhiJianTong.Shell.Views.CustomGeneralDialogs.CommonDialogWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:conv="clr-namespace:AnBiaoZhiJianTong.Shell.ShellUtilities.Converters"
        xmlns:customGeneralDialogs="clr-namespace:AnBiaoZhiJianTong.Shell.ViewModels.CustomGeneralDialogs"
        xmlns:converters="clr-namespace:AnBiaoZhiJianTong.Shell.ShellUtilities.Converters"
        d:DataContext="{d:DesignInstance Type=customGeneralDialogs:CommonDialogWindowViewModel}"
        mc:Ignorable="d"
        Title="{Binding Title}" Height="220" Width="480"
        WindowStartupLocation="CenterOwner"
        ResizeMode="NoResize" ShowInTaskbar="False" 
        AllowsTransparency="False"
        WindowStyle="ToolWindow">

    <Window.Resources>
        <converters:NullToVisibilityConverter x:Key="NullToVis"/>

        <SolidColorBrush x:Key="Primary500" Color="#2196F3"/>
        <SolidColorBrush x:Key="Primary600" Color="#1976D2"/>
        <SolidColorBrush x:Key="Primary700" Color="#1565C0"/>
        <SolidColorBrush x:Key="TextOnPrimary" Color="#FFFFFF"/>

        <Style x:Key="BaseRoundedButton" TargetType="Button">
            <Setter Property="Margin" Value="0,0,8,0"/>
            <Setter Property="Padding" Value="12,8"/>
            <Setter Property="Height" Value="36"/>
            <Setter Property="FontSize" Value="13"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="root"
                                CornerRadius="3"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}"
                                SnapsToDevicePixels="True">
                            <ContentPresenter
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                RecognizesAccessKey="True"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <!-- 键盘焦点虚线框：可视但不抢颜色 -->
                            <Trigger Property="IsKeyboardFocused" Value="True">
                                <Setter TargetName="root" Property="BorderBrush" Value="{StaticResource Primary500}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="root" Property="Opacity" Value="0.6"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="PrimaryButtonStyle" TargetType="Button" BasedOn="{StaticResource BaseRoundedButton}">
            <Setter Property="Background" Value="{StaticResource Primary500}"/>
            <Setter Property="Foreground" Value="{StaticResource TextOnPrimary}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Primary500}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{StaticResource Primary600}"/>
                    <Setter Property="BorderBrush" Value="{StaticResource Primary600}"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="{StaticResource Primary700}"/>
                    <Setter Property="BorderBrush" Value="{StaticResource Primary700}"/>
                </Trigger>
                <!-- 默认按钮：对话框回车键 -->
                <Trigger Property="IsDefault" Value="True">
                    <Setter Property="BorderBrush" Value="{StaticResource Primary700}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>

    <WindowChrome.WindowChrome>
        <WindowChrome
            CaptionHeight="0"
            ResizeBorderThickness="5"
            GlassFrameThickness="5"
            UseAeroCaptionButtons="False"/>
    </WindowChrome.WindowChrome>

    <!-- 外层圆角+边框，保证无边框窗口也有边界 -->
    <Border CornerRadius="6" BorderBrush="#DDDDDD" BorderThickness="1" Background="White" SnapsToDevicePixels="True">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="30"/>
                <!-- 自定义标题栏 -->
                <RowDefinition Height="*"/>
                <!-- 主体 -->
            </Grid.RowDefinitions>

            <!-- 标题栏：与主窗体一致 -->
            <Grid Grid.Row="0" Background="#2C3E50" MouseLeftButtonDown="TitleBar_MouseLeftButtonDown">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <!-- 左：图标 + 标题文字 -->
                <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="10,0,0,0">
                    <TextBlock Text="{Binding Title}" Foreground="White" FontSize="13" VerticalAlignment="Center"/>
                </StackPanel>

                <!-- 右：关闭按钮 -->
                <Button Grid.Column="1" Width="30" Height="32" Background="Transparent" BorderThickness="0"
                        ToolTip="关闭" Click="CloseButton_Click" Cursor="Hand">
                    <Path Data="M0,0 L8,8 M8,0 L0,8" Stroke="White" StrokeThickness="1"
                          HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    <Button.Style>
                        <Style TargetType="Button">
                            <Setter Property="Background" Value="Transparent"/>
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="#E74C3C"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
            </Grid>

            <!-- 主体内容（你原来的布局） -->
            <Grid Grid.Row="1" Margin="16">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <!-- 头部：图标 + Header -->
                <DockPanel Grid.Row="0" Margin="15,0,0,10">
                    <Border Width="28" Height="28" CornerRadius="6"
                            Background="#EEF3FF" BorderBrush="#DCE4FF" BorderThickness="1"
                            Margin="0,0,8,0" Visibility="{Binding IconVisibility}">
                        <TextBlock Text="{Binding IconGlyph}"
                                   FontFamily="Segoe MDL2 Assets"
                                   FontSize="16"
                                   FontWeight="ExtraBold"
                                   Foreground="{Binding IconBrush}"
                                   HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                    <TextBlock Text="{Binding Header}" FontSize="15" FontWeight="Bold"
                               VerticalAlignment="Center"/>
                </DockPanel>

                <!-- 主文案 -->
                <ScrollViewer Grid.Row="1" Margin="15,10,0,10" VerticalScrollBarVisibility="Auto">
                    <TextBlock Text="{Binding Message}" TextWrapping="Wrap" FontSize="13"/>
                </ScrollViewer>

                <!-- 勾选框 -->
                <CheckBox Grid.Row="2" Margin="0,10,0,8"
                          Visibility="{Binding CheckboxVisibility}"
                          Content="{Binding CheckboxText}"
                          IsChecked="{Binding CheckboxChecked, Mode=TwoWay}"/>

                <!-- 按钮：两列布局 -->
                <Grid Grid.Row="3" Margin="0,10,0,0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>

                    <!-- 主按钮 -->
                    <Button Grid.Column="0"
                            Content="{Binding FirstButton.Text}"
                            Height="32" Width="80"
                            IsDefault="{Binding FirstButton.IsDefault}"
                            IsCancel="{Binding FirstButton.IsCancel}"
                            Command="{Binding ButtonClickCommand, RelativeSource={RelativeSource AncestorType=customGeneralDialogs:CommonDialogWindowViewModel}}"
                            CommandParameter="{Binding FirstButton.Result}">
                        <!-- 当 SecondButton 为空时，让主按钮居中 -->
                        <Button.Style>
                            <Style TargetType="Button" BasedOn="{StaticResource PrimaryButtonStyle}">
                                <!-- 默认：两列时放左侧，留出间距 -->
                                <Setter Property="HorizontalAlignment" Value="Left"/>
                                <Setter Property="Margin" Value="75,0,10,0"/>
                                <Setter Property="IsDefault" Value="{Binding FirstButton.IsDefault}"/>
                                <Setter Property="IsCancel"  Value="{Binding FirstButton.IsCancel}"/>
                                <!-- 只有一个按钮：跨两列 + 居中 + 去间距 -->
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding SecondButton}" Value="{x:Null}">
                                        <Setter Property="Grid.ColumnSpan" Value="2"/>
                                        <Setter Property="HorizontalAlignment" Value="Center"/>
                                        <Setter Property="Margin" Value="0"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>

                    <!-- 右按钮 -->
                    <Button Grid.Column="1"
                            Content="{Binding SecondButton.Text}"
                            Height="32" Width="80" Margin="0,0,75,0"
                            HorizontalAlignment="Right"
                            Visibility="{Binding SecondButton, Converter={StaticResource NullToVis}}"
                            IsDefault="{Binding SecondButton.IsDefault}"
                            IsCancel="{Binding SecondButton.IsCancel}"
                            Command="{Binding ButtonClickCommand, RelativeSource={RelativeSource AncestorType=customGeneralDialogs:CommonDialogWindowViewModel}}"
                            CommandParameter="{Binding SecondButton.Result}">
                        <Button.Style>
                            <Style TargetType="Button" BasedOn="{StaticResource PrimaryButtonStyle}">
                                <Setter Property="HorizontalAlignment" Value="Right"/>
                                <Setter Property="Margin" Value="0,0,75,0"/>
                                <Setter Property="IsDefault" Value="{Binding SecondButton.IsDefault}"/>
                                <Setter Property="IsCancel"  Value="{Binding SecondButton.IsCancel}"/>
                            </Style>
                        </Button.Style>
                    </Button>
                </Grid>
            </Grid>
        </Grid>
    </Border>

</Window>
